// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: example/example.proto

package exampleconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	example "github.com/lcmaguire/protoc-gen-lazy-proxy/proto/example"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ExampleServiceName is the fully-qualified name of the ExampleService service.
	ExampleServiceName = "example.ExampleService"
)

// ExampleServiceClient is a client for the example.ExampleService service.
type ExampleServiceClient interface {
	Example(context.Context, *connect_go.Request[example.ExampleRequest]) (*connect_go.Response[example.ExampleResponse], error)
}

// NewExampleServiceClient constructs a client for the example.ExampleService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExampleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ExampleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &exampleServiceClient{
		example: connect_go.NewClient[example.ExampleRequest, example.ExampleResponse](
			httpClient,
			baseURL+"/example.ExampleService/Example",
			opts...,
		),
	}
}

// exampleServiceClient implements ExampleServiceClient.
type exampleServiceClient struct {
	example *connect_go.Client[example.ExampleRequest, example.ExampleResponse]
}

// Example calls example.ExampleService.Example.
func (c *exampleServiceClient) Example(ctx context.Context, req *connect_go.Request[example.ExampleRequest]) (*connect_go.Response[example.ExampleResponse], error) {
	return c.example.CallUnary(ctx, req)
}

// ExampleServiceHandler is an implementation of the example.ExampleService service.
type ExampleServiceHandler interface {
	Example(context.Context, *connect_go.Request[example.ExampleRequest]) (*connect_go.Response[example.ExampleResponse], error)
}

// NewExampleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExampleServiceHandler(svc ExampleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/example.ExampleService/Example", connect_go.NewUnaryHandler(
		"/example.ExampleService/Example",
		svc.Example,
		opts...,
	))
	return "/example.ExampleService/", mux
}

// UnimplementedExampleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExampleServiceHandler struct{}

func (UnimplementedExampleServiceHandler) Example(context.Context, *connect_go.Request[example.ExampleRequest]) (*connect_go.Response[example.ExampleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("example.ExampleService.Example is not implemented"))
}
