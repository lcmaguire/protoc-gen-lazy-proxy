// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: example/example.proto

package exampleconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	example "github.com/lcmaguire/protoc-gen-lazy-proxy/proto/example"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ExtraServiceName is the fully-qualified name of the ExtraService service.
	ExtraServiceName = "example.ExtraService"
)

// ExtraServiceClient is a client for the example.ExtraService service.
type ExtraServiceClient interface {
	Extra(context.Context, *connect_go.Request[example.ExtraRequest]) (*connect_go.Response[example.ExtraResponse], error)
}

// NewExtraServiceClient constructs a client for the example.ExtraService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExtraServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ExtraServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &extraServiceClient{
		extra: connect_go.NewClient[example.ExtraRequest, example.ExtraResponse](
			httpClient,
			baseURL+"/example.ExtraService/Extra",
			opts...,
		),
	}
}

// extraServiceClient implements ExtraServiceClient.
type extraServiceClient struct {
	extra *connect_go.Client[example.ExtraRequest, example.ExtraResponse]
}

// Extra calls example.ExtraService.Extra.
func (c *extraServiceClient) Extra(ctx context.Context, req *connect_go.Request[example.ExtraRequest]) (*connect_go.Response[example.ExtraResponse], error) {
	return c.extra.CallUnary(ctx, req)
}

// ExtraServiceHandler is an implementation of the example.ExtraService service.
type ExtraServiceHandler interface {
	Extra(context.Context, *connect_go.Request[example.ExtraRequest]) (*connect_go.Response[example.ExtraResponse], error)
}

// NewExtraServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExtraServiceHandler(svc ExtraServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/example.ExtraService/Extra", connect_go.NewUnaryHandler(
		"/example.ExtraService/Extra",
		svc.Extra,
		opts...,
	))
	return "/example.ExtraService/", mux
}

// UnimplementedExtraServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExtraServiceHandler struct{}

func (UnimplementedExtraServiceHandler) Extra(context.Context, *connect_go.Request[example.ExtraRequest]) (*connect_go.Response[example.ExtraResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("example.ExtraService.Extra is not implemented"))
}
